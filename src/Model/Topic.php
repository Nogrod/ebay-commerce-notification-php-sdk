<?php

/**
 * Topic
 *
 * PHP version 8.1
 *
 * @package  eBay\Commerce\Notification
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Notification API
 *
 * The eBay Notification API enables management of the entire end-to-end eBay notification experience by allowing users to:<ul><li>Browse for supported notification topics and retrieve topic details</li><li>Create, configure, and manage notification destination endpoints</li><li>Configure, manage, and test notification subscriptions</li><li>Process eBay notifications and verify the integrity of the message payload</li></ul>
 *
 * The version of the OpenAPI document: v1.6.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eBay\Commerce\Notification\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use eBay\Commerce\Notification\ObjectSerializer;

/**
 * Topic Class Doc Comment
 *
 * @description A type that describes the details of the topic.
 * @package  eBay\Commerce\Notification
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Topic implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Topic';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'authorization_scopes' => 'string[]',
        'context' => 'string',
        'description' => 'string',
        'filterable' => 'bool',
        'scope' => 'string',
        'status' => 'string',
        'supported_payloads' => '\eBay\Commerce\Notification\Model\PayloadDetail[]',
        'topic_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'authorization_scopes' => null,
        'context' => null,
        'description' => null,
        'filterable' => null,
        'scope' => null,
        'status' => null,
        'supported_payloads' => null,
        'topic_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'authorization_scopes' => false,
        'context' => false,
        'description' => false,
        'filterable' => false,
        'scope' => false,
        'status' => false,
        'supported_payloads' => false,
        'topic_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'authorization_scopes' => 'authorizationScopes',
        'context' => 'context',
        'description' => 'description',
        'filterable' => 'filterable',
        'scope' => 'scope',
        'status' => 'status',
        'supported_payloads' => 'supportedPayloads',
        'topic_id' => 'topicId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'authorization_scopes' => 'setAuthorizationScopes',
        'context' => 'setContext',
        'description' => 'setDescription',
        'filterable' => 'setFilterable',
        'scope' => 'setScope',
        'status' => 'setStatus',
        'supported_payloads' => 'setSupportedPayloads',
        'topic_id' => 'setTopicId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'authorization_scopes' => 'getAuthorizationScopes',
        'context' => 'getContext',
        'description' => 'getDescription',
        'filterable' => 'getFilterable',
        'scope' => 'getScope',
        'status' => 'getStatus',
        'supported_payloads' => 'getSupportedPayloads',
        'topic_id' => 'getTopicId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('authorization_scopes', $data ?? [], null);
        $this->setIfExists('context', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('filterable', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('supported_payloads', $data ?? [], null);
        $this->setIfExists('topic_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorization_scopes
     *
     * @return string[]|null
     */
    public function getAuthorizationScopes(): ?array
    {
        return $this->container['authorization_scopes'];
    }

    /**
     * Sets authorization_scopes
     *
     * @param string[]|null $authorization_scopes The authorization scopes required to subscribe to this topic.
     *
     * @return $this
     */
    public function setAuthorizationScopes(?array $authorization_scopes): static
    {
        if (is_null($authorization_scopes)) {
            throw new InvalidArgumentException('non-nullable authorization_scopes cannot be null');
        }
        $this->container['authorization_scopes'] = $authorization_scopes;

        return $this;
    }

    /**
     * Gets context
     *
     * @return string|null
     */
    public function getContext(): ?string
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string|null $context The business context associated with this topic. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/api:ContextEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setContext(?string $context): static
    {
        if (is_null($context)) {
            throw new InvalidArgumentException('non-nullable context cannot be null');
        }
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the topic.
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets filterable
     *
     * @return bool|null
     */
    public function getFilterable(): ?bool
    {
        return $this->container['filterable'];
    }

    /**
     * Sets filterable
     *
     * @param bool|null $filterable The indicator of whether this topic is filterable or not.
     *
     * @return $this
     */
    public function setFilterable(?bool $filterable): static
    {
        if (is_null($filterable)) {
            throw new InvalidArgumentException('non-nullable filterable cannot be null');
        }
        $this->container['filterable'] = $filterable;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope(): ?string
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope The scope of this topic. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/api:ScopeEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setScope(?string $scope): static
    {
        if (is_null($scope)) {
            throw new InvalidArgumentException('non-nullable scope cannot be null');
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of this topic. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/api:StatusEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setStatus(?string $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets supported_payloads
     *
     * @return \eBay\Commerce\Notification\Model\PayloadDetail[]|null
     */
    public function getSupportedPayloads(): ?array
    {
        return $this->container['supported_payloads'];
    }

    /**
     * Sets supported_payloads
     *
     * @param \eBay\Commerce\Notification\Model\PayloadDetail[]|null $supported_payloads The supported payloads for this topic.
     *
     * @return $this
     */
    public function setSupportedPayloads(?array $supported_payloads): static
    {
        if (is_null($supported_payloads)) {
            throw new InvalidArgumentException('non-nullable supported_payloads cannot be null');
        }
        $this->container['supported_payloads'] = $supported_payloads;

        return $this;
    }

    /**
     * Gets topic_id
     *
     * @return string|null
     */
    public function getTopicId(): ?string
    {
        return $this->container['topic_id'];
    }

    /**
     * Sets topic_id
     *
     * @param string|null $topic_id The unique identifier for the topic.
     *
     * @return $this
     */
    public function setTopicId(?string $topic_id): static
    {
        if (is_null($topic_id)) {
            throw new InvalidArgumentException('non-nullable topic_id cannot be null');
        }
        $this->container['topic_id'] = $topic_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


