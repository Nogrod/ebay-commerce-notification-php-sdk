<?php
/**
 * SubscriptionApiTest
 * PHP version 8.1
 *
 * @package  eBay\Commerce\Notification
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Notification API
 *
 * The eBay Notification API enables management of the entire end-to-end eBay notification experience by allowing users to:<ul><li>Browse for supported notification topics and retrieve topic details</li><li>Create, configure, and manage notification destination endpoints</li><li>Configure, manage, and test notification subscriptions</li><li>Process eBay notifications and verify the integrity of the message payload</li></ul>
 *
 * The version of the OpenAPI document: v1.6.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace eBay\Commerce\Notification\Test\Api;

use eBay\Commerce\Notification\Configuration;
use eBay\Commerce\Notification\ApiException;
use eBay\Commerce\Notification\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * SubscriptionApiTest Class Doc Comment
 *
 * @package  eBay\Commerce\Notification
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SubscriptionApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createSubscription
     *
     * .
     *
     */
    public function testCreateSubscription()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createSubscriptionFilter
     *
     * .
     *
     */
    public function testCreateSubscriptionFilter()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteSubscription
     *
     * .
     *
     */
    public function testDeleteSubscription()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteSubscriptionFilter
     *
     * .
     *
     */
    public function testDeleteSubscriptionFilter()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for disableSubscription
     *
     * .
     *
     */
    public function testDisableSubscription()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for enableSubscription
     *
     * .
     *
     */
    public function testEnableSubscription()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSubscription
     *
     * .
     *
     */
    public function testGetSubscription()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSubscriptionFilter
     *
     * .
     *
     */
    public function testGetSubscriptionFilter()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSubscriptions
     *
     * .
     *
     */
    public function testGetSubscriptions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testSubscription
     *
     * .
     *
     */
    public function testTestSubscription()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateSubscription
     *
     * .
     *
     */
    public function testUpdateSubscription()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
